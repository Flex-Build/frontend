/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace FlexBuild {
  export type ComponentStruct = {
    owner: PromiseOrValue<string>;
    code_hash: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type ComponentStructOutput = [string, string, BigNumber, string] & {
    owner: string;
    code_hash: string;
    price: BigNumber;
    name: string;
  };
}

export interface FlexBuildInterface extends utils.Interface {
  functions: {
    "buyComponents(uint256[])": FunctionFragment;
    "createComponent(string,uint256,string)": FunctionFragment;
    "getComponents()": FunctionFragment;
    "id_to_component(uint256)": FunctionFragment;
    "id_to_order(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyComponents"
      | "createComponent"
      | "getComponents"
      | "id_to_component"
      | "id_to_order"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyComponents",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createComponent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "id_to_component",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "id_to_order",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "id_to_component",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "id_to_order",
    data: BytesLike
  ): Result;

  events: {
    "ComponentBought(address,uint256)": EventFragment;
    "ComponentCreated(address,string,uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ComponentBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComponentCreated"): EventFragment;
}

export interface ComponentBoughtEventObject {
  buyer: string;
  component_id: BigNumber;
}
export type ComponentBoughtEvent = TypedEvent<
  [string, BigNumber],
  ComponentBoughtEventObject
>;

export type ComponentBoughtEventFilter = TypedEventFilter<ComponentBoughtEvent>;

export interface ComponentCreatedEventObject {
  owner: string;
  code_hash: string;
  price: BigNumber;
  id: BigNumber;
  name: string;
}
export type ComponentCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  ComponentCreatedEventObject
>;

export type ComponentCreatedEventFilter =
  TypedEventFilter<ComponentCreatedEvent>;

export interface FlexBuild extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlexBuildInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyComponents(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createComponent(
      code_hash: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getComponents(
      overrides?: CallOverrides
    ): Promise<[FlexBuild.ComponentStructOutput[]]>;

    id_to_component(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        owner: string;
        code_hash: string;
        price: BigNumber;
        name: string;
      }
    >;

    id_to_order(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { buyer: string; component_id: BigNumber }
    >;
  };

  buyComponents(
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createComponent(
    code_hash: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getComponents(
    overrides?: CallOverrides
  ): Promise<FlexBuild.ComponentStructOutput[]>;

  id_to_component(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      owner: string;
      code_hash: string;
      price: BigNumber;
      name: string;
    }
  >;

  id_to_order(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { buyer: string; component_id: BigNumber }>;

  callStatic: {
    buyComponents(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createComponent(
      code_hash: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getComponents(
      overrides?: CallOverrides
    ): Promise<FlexBuild.ComponentStructOutput[]>;

    id_to_component(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        owner: string;
        code_hash: string;
        price: BigNumber;
        name: string;
      }
    >;

    id_to_order(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { buyer: string; component_id: BigNumber }
    >;
  };

  filters: {
    "ComponentBought(address,uint256)"(
      buyer?: null,
      component_id?: null
    ): ComponentBoughtEventFilter;
    ComponentBought(
      buyer?: null,
      component_id?: null
    ): ComponentBoughtEventFilter;

    "ComponentCreated(address,string,uint256,uint256,string)"(
      owner?: null,
      code_hash?: null,
      price?: null,
      id?: null,
      name?: null
    ): ComponentCreatedEventFilter;
    ComponentCreated(
      owner?: null,
      code_hash?: null,
      price?: null,
      id?: null,
      name?: null
    ): ComponentCreatedEventFilter;
  };

  estimateGas: {
    buyComponents(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createComponent(
      code_hash: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getComponents(overrides?: CallOverrides): Promise<BigNumber>;

    id_to_component(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id_to_order(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyComponents(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createComponent(
      code_hash: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getComponents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id_to_component(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    id_to_order(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
